{"version":3,"sources":["components/app-info/app-info.js","components/search-panel/search-panel.js","components/app-filter/app-filter.js","components/employees-list-item/employees-list-item.js","components/employees-list/employees-list.js","components/employees-add-form/employees-add-form.js","components/app/app.js","index.js"],"names":["AppInfo","allEmployees","allIncrease","allLiked","className","SearchPanel","props","onLocalSearch","e","term","target","value","setState","onUpdateSearch","state","type","placeholder","this","onChange","Component","AppFilter","button","name","label","map","clazz","filter","onClick","onFilter","EmployeesListItem","salary","onDelete","onToggleProp","classNames","increase","rise","defaultValue","EmployeesList","data","elements","item","id","itemProps","currentTarget","getAttribute","EmployeesAddForm","onValueChange","onSubmit","onAdd","preventDefault","App","deleteItem","elem","addItem","newItem","maxId","prop","searchEmp","items","length","indexOf","filterEmp","visibleData","ReactDOM","render","document","getElementById"],"mappings":"gXAaeA,EAXC,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SACzC,OACI,sBAAKC,UAAU,WAAf,UACI,8LACA,kMAAmCH,KACnC,mHAAqBC,EAArB,OACA,qIAAwBC,EAAxB,WCwBGE,G,wDA3BX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAMVC,cAAgB,SAACC,GACb,IAAMC,EAAOD,EAAEE,OAAOC,MACtB,EAAKC,SAAS,CACVH,KAAMA,IAEV,EAAKH,MAAMO,eAAeJ,IAV1B,EAAKK,MAAQ,CACTL,KAAM,IAHI,E,0CAelB,WACI,OACI,uBAAOM,KAAK,OACRX,UAAU,4BACVY,YAAY,8FACZL,MAAOM,KAAKH,MAAML,KAClBS,SAAUD,KAAKV,oB,GAtBLY,cC+BXC,G,MAjCG,SAACd,GAEf,IAOMe,EAPc,CAChB,CAACC,KAAK,MAAOC,MAAO,mFACpB,CAACD,KAAK,WAAYC,MAAO,mFACzB,CAACD,KAAK,OAAQC,MAAO,qGACrB,CAACD,KAAK,eAAgBC,MAAO,6DAGNC,KAAI,YAAoB,IAAlBF,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAE7BE,EADSnB,EAAMoB,SAAWJ,EACT,YAAc,oBACrC,OACI,wBACIlB,UAAS,cAASqB,GAElBV,KAAK,SACLY,QAAS,kBAAMrB,EAAMsB,SAASN,IAJlC,SAKSC,GAHAD,MASjB,OACI,qBAAKlB,UAAU,YAAf,SACKiB,M,QCkBEQ,G,MA3CW,SAAC,GAA6D,IAA5DP,EAA2D,EAA3DA,KAAMQ,EAAqD,EAArDA,OAAQC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,aAE5CC,EAAa,iDAUjB,OAZmF,EAArBC,WAK1DD,GAAc,aALiE,EAAXE,OASpEF,GAAc,SAId,qBAAI7B,UAAW6B,EAAf,UACI,sBAAM7B,UAAU,wBAAwBuB,QAASK,EAAc,cAAY,WAA3E,SAAuFV,IACvF,uBAAOP,KAAK,OAAOX,UAAU,wBAAwBgC,aAAcN,EAAS,MAC5E,sBAAK1B,UAAU,mDAAf,UACI,wBAAQW,KAAK,SACTX,UAAU,qBACVuB,QAASK,EAAc,cAAY,WAFvC,SAGI,mBAAG5B,UAAU,oBAGjB,wBAAQW,KAAK,SACLX,UAAU,oBACVuB,QAASI,EAFjB,SAGI,mBAAG3B,UAAU,mBAGjB,wBAAQW,KAAK,SACLX,UAAU,mBACVuB,QAASK,EAAc,cAAY,OAF3C,SAGI,mBAAG5B,UAAU,0B,iBCblBiC,EAnBO,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,KAAMP,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,aAE9BO,EAAWD,EAAKd,KAAI,SAAAgB,GACvB,IAAOC,EAAoBD,EAApBC,GAAOC,EAAd,YAA2BF,EAA3B,GACC,OACI,cAAC,EAAD,2BACiBE,GADjB,IAEIX,SAAW,kBAAMA,EAASU,IAC1BT,aAAc,SAACxB,GAAD,OAAOwB,EAAaS,EAAIjC,EAAEmC,cAAcC,aAAa,mBAF9DH,MAMjB,OACI,oBAAIrC,UAAU,sBAAd,SACKmC,KCkDEM,G,wDA9DX,WAAYvC,GAAO,IAAD,8BACd,cAAMA,IAOVwC,cAAgB,SAACtC,GACb,EAAKI,SAAL,eACKJ,EAAEE,OAAOY,KAAOd,EAAEE,OAAOC,SAVhB,EAelBoC,SAAW,SAACvC,GACR,IAAOwC,EAAS,EAAK1C,MAAd0C,MACP,EAAuB,EAAKlC,MAArBQ,EAAP,EAAOA,KAAMQ,EAAb,EAAaA,OAEbtB,EAAEyC,iBACC3B,GAAmB,KAAXQ,IACPkB,EAAM1B,EAAMQ,GACZ,EAAKlB,SAAS,CACVU,KAAM,GACNQ,OAAQ,OAtBhB,EAAKhB,MAAQ,CACTQ,KAAM,GACNQ,OAAQ,IAJE,E,0CA8BlB,WACI,MAAuBb,KAAKH,MAArBQ,EAAP,EAAOA,KAAMQ,EAAb,EAAaA,OAEb,OACI,sBAAK1B,UAAU,eAAf,UACI,oLACA,uBACIA,UAAU,kBACV2C,SAAU9B,KAAK8B,SAFnB,UAGI,uBAAOhC,KAAK,OACRX,UAAU,8BACVY,YAAY,wEACZM,KAAK,OACLX,MAAOW,EACPJ,SAAUD,KAAK6B,gBACnB,uBAAO/B,KAAK,SACRX,UAAU,8BACVY,YAAY,0BACZM,KAAK,SACLX,MAAOmB,EACPZ,SAAUD,KAAK6B,gBAEnB,wBAAQ/B,KAAK,SAASX,UAAU,wBAAhC,wE,GArDWe,cCwIhB+B,G,wDAjIX,WAAY5C,GAAO,IAAD,8BACd,cAAMA,IAeV6C,WAAa,SAACV,GACV,EAAK7B,UAAS,YACV,MAAM,CACF0B,KAFkB,EAAVA,KAEGZ,QAAO,SAAA0B,GAAI,OAAIA,EAAKX,KAAOA,UAnBhC,EAwBlBY,QAAU,SAAC/B,EAAMQ,GACb,IAAMwB,EAAU,CACZhC,KAAMA,EACNQ,OAAQA,EACRI,UAAU,EACVC,MAAM,EACNM,GAAI,EAAKc,SAGb,EAAK3C,UAAS,YAAa,IAAX0B,EAAU,EAAVA,KAGZ,MAAO,CACHA,KAHQ,sBAAOA,GAAP,CAAagB,SAlCf,EA0ClBtB,aAAe,SAACS,EAAIe,GAChB,EAAK5C,UAAS,kBAAa,CACvB0B,KADU,EAAEA,KACDd,KAAI,SAAAgB,GACX,OAAGA,EAAKC,KAAOA,EACX,2BAAUD,GAAV,kBAAiBgB,GAAQhB,EAAKgB,KAEvBhB,UAhDL,EAuDlBiB,UAAY,SAACC,EAAOjD,GAChB,OAAmB,IAAhBA,EAAKkD,OACGD,EAEAA,EAAMhC,QAAO,SAAAc,GAChB,OAAOA,EAAKlB,KAAKsC,QAAQnD,IAAS,MA5D5B,EAmElBI,eAAiB,SAACJ,GACd,EAAKG,SAAS,CACVH,KAAMA,KArEI,EAyElBoD,UAAY,SAACH,EAAOhC,GAChB,OAAQA,GACJ,IAAK,WACD,OAAOgC,EAAMhC,QAAO,SAAAc,GAAI,OAAIA,EAAKN,YACrC,IAAK,OACD,OAAOwB,EAAMhC,QAAO,SAAAc,GAAI,OAAIA,EAAKL,QACrC,IAAK,eACD,OAAOuB,EAAMhC,QAAO,SAAAc,GAAI,OAAIA,EAAKV,OAAS,OAC9C,QACI,OAAO4B,IAlFD,EAuFlB9B,SAAW,SAACF,GACR,EAAKd,SAAS,CACVc,OAAQA,KAvFZ,EAAKZ,MAAQ,CACTwB,KAAM,CACF,CAAChB,KAAK,4EAAiBQ,OAAO,MAAOI,UAAS,EAAMC,MAAK,EAAOM,GAAI,GACpE,CAACnB,KAAK,wFAAmBQ,OAAO,OAAQI,UAAS,EAAOC,MAAK,EAAOM,GAAI,GACxE,CAACnB,KAAK,sHAAwBQ,OAAO,OAAQI,UAAS,EAAOC,MAAK,EAAMM,GAAI,GAC5E,CAACnB,KAAK,kFAAkBQ,OAAO,OAAQI,UAAS,EAAOC,MAAK,EAAOM,GAAI,IAE3EhC,KAAM,GACNiB,OAAQ,OAGZ,EAAK6B,MAAQ,EAbC,E,0CA4FlB,WAEI,MAA6BtC,KAAKH,MAA3BwB,EAAP,EAAOA,KAAM7B,EAAb,EAAaA,KAAMiB,EAAnB,EAAmBA,OACboC,EAAc7C,KAAK4C,UAAU5C,KAAKwC,UAAUnB,EAAM7B,GAAOiB,GAEzDzB,EAAeqC,EAAKqB,OACpBzD,EAAcoC,EAAKZ,QAAO,SAAA0B,GAAI,OAAIA,EAAKlB,YAAUyB,OACjDxD,EAAWmC,EAAKZ,QAAO,SAAA0B,GAAI,OAAIA,EAAKjB,QAAMwB,OAEhD,OACI,sBAAKvD,UAAU,MAAf,UACI,cAAC,EAAD,CACIH,aAAeA,EACfC,YAAcA,EACdC,SAAYA,IAEhB,sBAAKC,UAAU,eAAf,UACI,cAAC,EAAD,CAAaS,eAAgBI,KAAKJ,iBAClC,cAAC,EAAD,CACIa,OAAQA,EACRE,SAAWX,KAAKW,cAGxB,cAAC,EAAD,CACIU,KAAMwB,EACN/B,SAAYd,KAAKkC,WACjBnB,aAAcf,KAAKe,eACvB,cAAC,EAAD,CACIgB,MAAQ/B,KAAKoC,iB,GAzHflC,cCLlB4C,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.423ad35d.chunk.js","sourcesContent":["import './app-info.css'\r\n\r\nconst AppInfo = ({allEmployees, allIncrease, allLiked}) => {\r\n    return(\r\n        <div className=\"app-info\">\r\n            <h1>Учет сотрудников в компании \"Elcode\"</h1>\r\n            <h2>Общее количество сотрудников: {allEmployees}</h2>\r\n            <h2>Премию получат: {allIncrease} </h2>\r\n            <h2>Лучшие сотрудники: {allLiked} </h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppInfo;","import { Component } from 'react';\r\n\r\nimport './search-panel.css'\r\n\r\nclass SearchPanel extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        }\r\n    }\r\n\r\n    onLocalSearch = (e) => {\r\n        const term = e.target.value;\r\n        this.setState({\r\n            term: term\r\n        });\r\n        this.props.onUpdateSearch(term);  //передаем в app.js данные ктр получили и там изм.данные на визуальной части сотр.\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <input type=\"text\"\r\n                className=\"form-control search-input\" //классы идут из bootstrap\r\n                placeholder='Найти сотрудника' \r\n                value={this.state.term}\r\n                onChange={this.onLocalSearch}/>\r\n        )\r\n    }\r\n \r\n}\r\n\r\nexport default SearchPanel;","import \"./app-filter.css\"\r\n\r\nconst AppFilter = (props) => {\r\n\r\n    const buttonsData = [\r\n        {name:'all', label: 'Все сотрудники'},\r\n        {name:'increase', label: 'Премию получат'},\r\n        {name:'rise', label: 'Лучшие сотрудники'},\r\n        {name:'moreThen1000', label: 'З/П больше 1000$'}\r\n    ]\r\n\r\n    const button = buttonsData.map(({name, label}) => {   //map новый[] по этим данным\r\n        const active = props.filter === name;\r\n        const clazz = active ? 'btn-light' : \"btn-outline-light\";\r\n        return(\r\n            <button \r\n                className={`btn ${clazz}`}\r\n                key={name}\r\n                type='button'\r\n                onClick={() => props.onFilter(name)}>\r\n                    {label}\r\n            </button>\r\n        )\r\n    })\r\n\r\n\r\n    return(\r\n        <div className=\"btn-group\">\r\n            {button}\r\n        </div>\r\n    )\r\n    \r\n \r\n}\r\n\r\nexport default AppFilter;","\nimport './employees-list-item.css';\n\nconst EmployeesListItem = ({name, salary, onDelete, onToggleProp, increase, rise}) =>  {  //каждый отдельный сотрудник; props приходят из EmployeesList, а оттуда из app.js\n\n    let classNames = 'list-group-item d-flex justify-content-between';\n\n    if(increase){          //если increase true\n        classNames += ' increase'; //то к классам добавляется стиль increase и ВАЖНО указать пробел, т.к.добавляется к строке\n    }\n\n    if(rise){          //если rise true\n        classNames += ' rise'; //то к классам добавляется стиль rise и ВАЖНО указать пробел, т.к.добавляется к строке\n    }\n    \n    return (\n        <li className={classNames}>\n            <span className=\"list-group-item-label\" onClick={onToggleProp} data-toggle='increase'>{name}</span>\n            <input type=\"text\" className=\"list-group-item-input\" defaultValue={salary + '$'}/> \n            <div className='d-flex justify-content-center align-items-center'>\n                <button type=\"button\"\n                    className=\"btn-cookie btn-sm \"\n                    onClick={onToggleProp} data-toggle='increase'> \n                    <i className=\"fas fa-cookie\"></i>\n                </button>\n\n                <button type=\"button\"\n                        className=\"btn-trash btn-sm \"\n                        onClick={onDelete}>\n                    <i className=\"fas fa-trash\"></i>\n                </button>\n\n                <button type=\"button\"\n                        className=\"btn-star btn-sm \"\n                        onClick={onToggleProp} data-toggle='rise'>\n                    <i className=\"fas fa-star\"></i>\n                </button>\n            </div>\n        </li>\n    )\n    \n \n}\n\n//defaultValue - значение по умолчанию\n\nexport default EmployeesListItem;\n\n\n\n\n","import EmployeesListItem from \"../employees-list-item/employees-list-item\";\r\nimport './employees-list.css';\r\n\r\nconst EmployeesList = ({data, onDelete, onToggleProp}) => {   //приходят как пропсы из app.js\r\n\r\n    const elements = data.map(item => {     //перебираем [] c данными и каждый раз создаем новую карточку с данными, ктр прописаны\r\n       const {id, ...itemProps} = item;   //необходимо из объекта элемента(item) отделить id\r\n        return(\r\n            <EmployeesListItem \r\n                key={id} {...itemProps}          //{...itemProps} развертывает, т.е. тоже самое , что name={item.name} salary ={item.salary} increase = {item.increase}  \r\n                onDelete ={() => onDelete(id)}   //полученный из пропсов onDelete изменили указав стрелочную и id и передали далее в EmployeesListItem\r\n                onToggleProp={(e) => onToggleProp(id, e.currentTarget.getAttribute('data-toggle'))}/>  //e.currentTarget - всегда совпадает эл-том, на ктр обработчик события был назначен и когда один и тот же обр. события присваивается нескольк. эл.\r\n        )\r\n    })\r\n\r\n    return(\r\n        <ul className=\"app-list list-group\">\r\n            {elements}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default EmployeesList;","import { Component } from 'react';\n\nimport './employees-add-form.css';\n\nclass EmployeesAddForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name: '',\n            salary: ''\n        }\n    }\n\n    onValueChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value //в name попадет, то что написал польз. \n        });  \n    }\n  \n\n    onSubmit = (e) => {\n        const {onAdd} = this.props;\n        const {name, salary} = this.state;\n       \n        e.preventDefault();\n        if(name && salary !== '') {\n            onAdd(name, salary) //в  state заменяется на новый пост по шаблону onAdd с инфо от польз.\n            this.setState({\n                name: '',\n                salary: ''      //после отправки информации, input снова очищается \n            })\n        }\n     \n    }\n\n    render(){\n        const {name, salary} = this.state;\n\n        return (\n            <div className=\"app-add-form\">\n                <h3>Добавьте нового сотрудника</h3>\n                <form\n                    className=\"add-form d-flex\"  //ВАЖНО! onSubmit указывается в form, а не в button\n                    onSubmit={this.onSubmit}>   \n                    <input type=\"text\"\n                        className=\"form-control new-post-label\"\n                        placeholder=\"Как его зовут?\"\n                        name=\"name\"            //name и value мы дописываем \n                        value={name}            //сюда попадают данные из изменного состояния, если не прописать value, то внесенные данные будут храниться только на сайте\n                        onChange={this.onValueChange} />\n                    <input type=\"number\"\n                        className=\"form-control new-post-label\"\n                        placeholder=\"З/П в $?\"\n                        name=\"salary\"               //name и value мы дописываем \n                        value={salary}                  \n                        onChange={this.onValueChange} />\n    \n                    <button type=\"submit\" className=\"btn btn-outline-light\">\n                        Добавить\n                    </button>\n                </form>\n            </div>\n        )\n    }\n\n}\n\nexport default EmployeesAddForm;","import { Component } from \"react\";\r\n\r\nimport AppInfo from \"../app-info/app-info\";\r\nimport SearchPanel from \"../search-panel/search-panel\";\r\nimport AppFilter from \"../app-filter/app-filter\";\r\nimport EmployeesList from \"../employees-list/employees-list\";\r\nimport EmployeesAddForm from \"../employees-add-form/employees-add-form\";\r\n\r\nimport \"./app.css\";\r\n\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: [         //данные приходят из базы данных, ктр далее предаем в EmployeesList\r\n                {name:\"Артем Борисов\", salary:\"900\", increase:true, rise:false, id: 1},     //id - уникальный key у каждого\r\n                {name:\"Аркадий Артемов\", salary:\"1200\", increase:false, rise:false, id: 2 },\r\n                {name:\"Людмила Александрова\", salary:\"1400\", increase:false, rise:true, id: 3},\r\n                {name:\"Эдуард Борисов\", salary:\"1500\", increase:false, rise:false, id: 4}\r\n            ],\r\n            term: '',   //будет приходить из SearchPanel, а туда попадать при внесение инфо в value польз.\r\n            filter: 'all' //по умолчанию отражаются все сотрудники\r\n        }\r\n\r\n        this.maxId = 5;\r\n    }\r\n\r\n    deleteItem = (id) => {      //удаляем эл. при нажатии на урно, id эл. на ктр нажали\r\n        this.setState(({data}) => {\r\n            return{\r\n                data: data.filter(elem => elem.id !== id)  //filter - создаст новый [] без эл. id, ктр совпал с нажатым на кнопку урно эл.  \r\n            }\r\n        })\r\n    }\r\n\r\n    addItem = (name, salary) => {\r\n        const newItem = {   //шаблон нового поста \r\n            name: name,\r\n            salary: salary,\r\n            increase: false,\r\n            rise: false,\r\n            id: this.maxId++\r\n        }\r\n\r\n        this.setState(({data}) => {\r\n            const newArr = [...data, newItem]; //...data - все содержание data + новый пост \r\n\r\n            return {\r\n                data: newArr\r\n            }\r\n        })\r\n    }\r\n\r\n    onToggleProp = (id, prop) => {            //id - приходит при нажатии на кнопку с cookie или star\r\n        this.setState(({data}) => ({       //возвращаем объект \r\n            data: data.map(item => {       //map создает новый []\r\n                if(item.id === id) {        //если при переборе id эл. совпадем с id приходящего эл.    \r\n                    return{...item, [prop]: !item[prop]}   //[prop]: !item[prop] - это если бы записали increase: !item.increase , создается новый объект с изменненным в нем increase на противоположен.\r\n                }else {\r\n                    return item;   //если не совпадает id с приходящим, то ничего не эл. не меняется и он возращается без изм\r\n                }\r\n            })\r\n        }))\r\n    }\r\n\r\n    //настройка поиска сотр.\r\n    searchEmp = (items, term) => {  //items - все данные, т.е. this.state.data, term - строка поиска\r\n        if(term.length === 0){     //если польз. ничего не внес, то отражаются все данные\r\n            return items;\r\n        }else {\r\n            return items.filter(item => {\r\n                return item.name.indexOf(term) > -1  //фильр.все данные и там находят кусочки строк(indexOf), ктр с совпадают с поиском(term) и показываем если такой есть(> -1)\r\n            })    \r\n        } \r\n        \r\n        \r\n    }\r\n\r\n    onUpdateSearch = (term) => {  //эти данные будут приходить из SearchPanel\r\n        this.setState({\r\n            term: term\r\n        });    //обновится состояние в гл. файле\r\n    }\r\n\r\n    filterEmp = (items, filter) => {\r\n        switch (filter) {\r\n            case 'increase':                                    //тоже самое если бы записали if(filter ==='increase'){\r\n                return items.filter(item => item.increase);    \r\n            case 'rise':\r\n                return items.filter(item => item.rise);\r\n            case 'moreThen1000':\r\n                return items.filter(item => item.salary > 1000)\r\n            default:\r\n                return items;\r\n               \r\n        }\r\n    }\r\n    \r\n    onFilter = (filter) => {\r\n        this.setState({\r\n            filter: filter\r\n        });\r\n    }\r\n    render(){\r\n            \r\n        const {data, term, filter} = this.state;\r\n        const visibleData = this.filterEmp(this.searchEmp(data, term), filter);\r\n\r\n        const allEmployees = data.length; //кол-во всех сотрудн.\r\n        const allIncrease = data.filter(elem => elem.increase).length; //filter- создает новый [] c increase(true) и получаем их кол-во\r\n        const allLiked = data.filter(elem => elem.rise).length; \r\n        \r\n        return(\r\n            <div className='app'>\r\n                <AppInfo \r\n                    allEmployees ={allEmployees}\r\n                    allIncrease ={allIncrease}\r\n                    allLiked = {allLiked}\r\n                />\r\n                <div className=\"search-panel\">\r\n                    <SearchPanel onUpdateSearch={this.onUpdateSearch}/>\r\n                    <AppFilter \r\n                        filter={filter}\r\n                        onFilter ={this.onFilter}\r\n                    />\r\n                </div>\r\n                <EmployeesList \r\n                    data={visibleData}   //будут отражаться нужные данные\r\n                    onDelete = {this.deleteItem}\r\n                    onToggleProp={this.onToggleProp}/>\r\n                <EmployeesAddForm\r\n                    onAdd ={this.addItem}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n//обработчики событий обозначют через on, например onAdd\r\n\r\nexport default App;","import React, {StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}